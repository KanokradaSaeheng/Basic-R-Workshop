getwd()
log(2)
2+2
x = "hello world"
x + y
x = 2
y = 3
x+y
getwd()
x <- c(1,2,3,4,5)
y <- 5:10
x==y
x = 5
sum(x)
F1(name = "Da")
a(name = "Da")
F1 <- function(name){
x <- paste("Hello ", name)
print(x)
}
F1(name = "Da")
height <- c(180, 155, 160, 167, 181)
height
p.names <- c("Joanna","Charlotte","Helen","Karen","Amy")
p.names
height_ord <- order(height)
height_ord
names_ord <- p.names[height_ord]
names_ord
names_ord
height <- c(180, 155, 160, 167, 181)
height
p.names <- c("Joanna","Charlotte","Helen","Karen","Amy")
p.names
height_ord <- order(height)
height_ord
names_ord <- p.names[height_ord]
names_ord
help("mean")
# 1.3 Calculate mean, standard deviation, range, and number of children
mean_weight <- mean(weight)
log(12.43)
log10(12.43)
sqrt(12.43)
exp(12.43)
log()
# 1.1 Find the natural log, log to the base 10, square root, and exponential of 12.43
log(12.43)
log10(12.43)
sqrt(12.43)
exp(12.43)
# 1.2 Create a weight vector
weight <- c(69, 62, 57, 59, 59, 64, 56, 66, 67, 66)
# 1.3 Calculate mean, standard deviation, range, and number of children
mean_weight <- mean(weight)
sd_weight <- sd(weight)
range_weight <- range(weight)
num_children <- length(weight)
# Extract first five weights
first_five <- weight[1:5]
# 1.4 Create height vector
height <- c(112, 102, 83, 84, 99, 90, 77, 112, 133, 112)
# Summary of height
summary(height)
# Extract heights ≤ 99 cm
shorter_child <- height[height <= 99]
# 1.5 Calculate BMI
bmi <- weight / (height / 100) ^ 2
# Print results
bmi
# 1.1 Find the natural log, log to the base 10, square root, and exponential of 12.43
log(12.43)
log10(12.43)
sqrt(12.43)
exp(12.43)
# 1.2 Create a weight vector
weight <- c(69, 62, 57, 59, 59, 64, 56, 66, 67, 66)
# 1.3 Calculate mean, standard deviation, range, and number of children
mean_weight <- mean(weight)
sd_weight <- sd(weight)
range_weight <- range(weight)
num_children <- length(weight)
# Extract first five weights
first_five <- weight[1:5]
# 1.4 Create height vector
height <- c(112, 102, 83, 84, 99, 90, 77, 112, 133, 112)
# Summary of height
summary(height)
# Extract heights ≤ 99 cm
shorter_child <- height[height <= 99]
# 1.5 Calculate BMI
bmi <- weight / (height / 100) ^ 2
# Print results
bmi
# 1.1 Find the natural log, log to the base 10, square root, and exponential of 12.43
log(12.43)
log10(12.43)
sqrt(12.43)
exp(12.43)
# 1.2 Create a weight vector
weight <- c(69, 62, 57, 59, 59, 64, 56, 66, 67, 66)
# 1.3 Calculate mean, standard deviation, range, and number of children
mean_weight <- mean(weight)
sd_weight <- sd(weight)
range_weight <- range(weight)
num_children <- length(weight)
# Extract first five weights
first_five <- weight[1:5]
# 1.4 Create height vector
height <- c(112, 102, 83, 84, 99, 90, 77, 112, 133, 112)
# Summary of height
summary(height)
# Extract heights ≤ 99 cm
shorter_child <- height[height <= 99]
# 1.5 Calculate BMI
bmi <- weight / (height / 100) ^ 2
# Print results
bmi
# 1.1 Find the natural log, log to the base 10, square root, and exponential of 12.43
log(12.43)
log10(12.43)
sqrt(12.43)
exp(12.43)
# 1.2 Create a weight vector
weight <- c(69, 62, 57, 59, 59, 64, 56, 66, 67, 66)
# 1.3 Calculate mean, standard deviation, range, and number of children
mean_weight <- mean(weight)
sd_weight <- sd(weight)
range_weight <- range(weight)
num_children <- length(weight)
# Extract first five weights
first_five <- weight[1:5]
# 1.4 Create height vector
height <- c(112, 102, 83, 84, 99, 90, 77, 112, 133, 112)
# Summary of height
summary(height)
# Extract heights ≤ 99 cm
shorter_child <- height[height <= 99]
# 1.5 Calculate BMI
bmi <- weight / (height / 100) ^ 2
# Print results
bmi
# 1.1 Find the natural log, log to the base 10, square root, and exponential of 12.43
log(12.43)
log10(12.43)
sqrt(12.43)
exp(12.43)
# 1.2 Create a weight vector
weight <- c(69, 62, 57, 59, 59, 64, 56, 66, 67, 66)
# 1.3 Calculate mean, standard deviation, range, and number of children
mean_weight <- mean(weight)
sd_weight <- sd(weight)
range_weight <- range(weight)
num_children <- length(weight)
# Extract first five weights
first_five <- weight[1:5]
# 1.4 Create height vector
height <- c(112, 102, 83, 84, 99, 90, 77, 112, 133, 112)
summary(height)
shorter_child <- height[height <= 99]
# 1.5 Calculate BMI
bmi <- weight / (height / 100) ^ 2
# Print results
bmi
# 1.1 Find the natural log, log to the base 10, square root, and exponential of 12.43
log(12.43)
log10(12.43)
sqrt(12.43)
exp(12.43)
# 1.2 Create a weight vector
weight <- c(69, 62, 57, 59, 59, 64, 56, 66, 67, 66)
# 1.3 Calculate mean, standard deviation, range, and number of children
mean_weight <- mean(weight)
sd_weight <- sd(weight)
range_weight <- range(weight)
num_children <- length(weight)
first_five <- weight[1:5]
# 1.4 Create height vector
height <- c(112, 102, 83, 84, 99, 90, 77, 112, 133, 112)
summary(height)
shorter_child <- height[height <= 99]
# 1.5 Calculate BMI
bmi <- weight / (height / 100) ^ 2
# Print results
bmi
shorter_child
# 1.1 Find the natural log, log to the base 10, square root, and exponential of 12.43
log(12.43)
log10(12.43)
sqrt(12.43)
exp(12.43)
# 1.2 Create a weight vector
weight <- c(69, 62, 57, 59, 59, 64, 56, 66, 67, 66)
# 1.3 Calculate mean, standard deviation, range, and number of children
mean_weight <- mean(weight)
sd_weight <- sd(weight)
range_weight <- range(weight)
num_children <- length(weight)
first_five <- weight[1:5]
# 1.4 Create height vector
height <- c(112, 102, 83, 84, 99, 90, 77, 112, 133, 112)
summary(height)
shorter_child <- height[height <= 99]
# 1.5 Calculate BMI
bmi <- weight / (height / 100) ^ 2
# Print results
bmi
data <- read.csv("data1.csv")
str(data)
# 2.1 Import the whaledata.csv file into R
whale <- read.csv("whaledata.csv")
# 2.2 Display the first 5 rows
head(whale, 5)
# Display the structure of the dataset
str(whale)
num_obs <- nrow(whale)
num_vars <- ncol(whale)
class(whale$month)
class(whale$water.noise)
# 2.3 Get a summary of the dataset
summary(whale)
colSums(is.na(whale))
# 2.4 Sort the dataset by depth in ascending order
whale.depth.sort <- whale[order(whale$depth), ]
# 2.5 Sort dataset by ascending depth within each level of water noise
whale.noise.depth.sort <- whale[order(whale$water.noise, whale$depth), ]
# 2.6 Sort dataset by descending depth within each level of water noise
whale.noise.depth.desc <- whale[order(whale$water.noise, -whale$depth), ]
# 2.7 Count observations for each level of water noise
table(whale$water.noise)
table(whale$water.noise, whale$month)
# 2.1 Import the whaledata.csv file into R
whale <- read.csv("whaledata.csv")
# 2.2 Display the first 5 rows
head(whale, 5)
str(whale)
num_obs <- nrow(whale)
num_vars <- ncol(whale)
class(whale$month)
class(whale$water.noise)
# 2.3 Get a summary of the dataset
summary(whale)
colSums(is.na(whale))
# 2.4 Sort the dataset by depth in ascending order
whale.depth.sort <- whale[order(whale$depth), ]
# 2.5 Sort dataset by ascending depth within each level of water noise
whale.noise.depth.sort <- whale[order(whale$water.noise, whale$depth), ]
# 2.6 Sort dataset by descending depth within each level of water noise
whale.noise.depth.desc <- whale[order(whale$water.noise, -whale$depth), ]
# 2.7 Count observations for each level of water noise
table(whale$water.noise)
table(whale$water.noise, whale$month)
View(whale)
View(whale.depth.sort)
View(whale)
View(whale.noise.depth.sort)
View(whale.depth.sort)
View(whale.depth.sort)
View(whale.noise.depth.sort)
View(whale.noise.depth.desc)
View(whale.noise.depth.desc)
# 2.1 Import the whaledata.csv file into R
whale <- read.csv("whaledata.csv")
# 2.2 Display the first 5 rows
head(whale, 5)
str(whale)
num_obs <- nrow(whale)
num_vars <- ncol(whale)
class(whale$month)
class(whale$water.noise)
# 2.3 Get a summary of the dataset
summary(whale)
colSums(is.na(whale))
# 2.4 Sort the dataset by depth in ascending order
whale.depth.sort <- whale[order(whale$depth), ]
# 2.5 Sort dataset by ascending depth within each level of water noise
whale.noise.depth.sort <- whale[order(whale$water.noise, whale$depth), ]
# 2.6 Sort dataset by descending depth within each level of water noise
whale.noise.depth.desc <- whale[order(whale$water.noise, -whale$depth), ]
# 2.7 Count observations for each level of water noise
table(whale$water.noise)
table(whale$water.noise, whale$month)
install.packages("readxl")
library(readxl)
# 2.1 Import the whaledata.csv file into R
whale <- read.csv("whaledata.csv")
# 2.2 Display the first 5 rows
head(whale, 5)
str(whale)
num_obs <- nrow(whale)
num_vars <- ncol(whale)
class(whale$month)
class(whale$water.noise)
# 2.3 Get a summary of the dataset
summary(whale)
colSums(is.na(whale))
# 2.4 Sort the dataset by depth in ascending order
whale.depth.sort <- whale[order(whale$depth), ]
# 2.5 Sort dataset by ascending depth within each level of water noise
whale.noise.depth.sort <- whale[order(whale$water.noise, whale$depth), ]
# 2.6 Sort dataset by descending depth within each level of water noise
whale.noise.depth.desc <- whale[order(whale$water.noise, -whale$depth), ]
# 2.7 Count observations for each level of water noise
table(whale$water.noise)
table(whale$water.noise, whale$month)
# 2.1 Import the whaledata.csv file into R
whale <- read.csv("whaledata.csv")
# 2.2 Display the first 5 rows
head(whale, 5)
str(whale)
num_obs <- nrow(whale)
num_vars <- ncol(whale)
class(whale$month)
class(whale$water.noise)
# 2.3 Get a summary of the dataset
summary(whale)
colSums(is.na(whale))
# 2.4 Sort the dataset by depth in ascending order
whale.depth.sort <- whale[order(whale$depth), ]
# 2.5 Sort dataset by ascending depth within each level of water noise
whale.noise.depth.sort <- whale[order(whale$water.noise, whale$depth), ]
# 2.6 Sort dataset by descending depth within each level of water noise
whale.noise.depth.desc <- whale[order(whale$water.noise, -whale$depth), ]
# 2.7 Count observations for each level of water noise
table(whale$water.noise)
table(whale$water.noise, whale$month)
# Import the squid dataset
squid <- read.csv("squid.csv")
str(squid)
summary(squid)
num_obs <- nrow(squid)
num_vars <- ncol(squid)
squid$year <- as.factor(squid$year)
squid$month <- as.factor(squid$month)
squid$maturity.stage <- as.factor(squid$maturity.stage)
# Check structure again after conversion
str(squid)
View(squid)
# Set up a 2x2 plotting area
par(mfrow = c(2, 2))
# Create histograms for DML, weight, eviscerate.weight, and ovary.weight
hist(squid$DML, main = "DML Distribution", xlab = "DML", col = "lightblue")
# Adjust margins to prevent plotting errors
par(mar = c(4, 4, 2, 1))
# Arrange 4 histograms in a 2x2 grid
par(mfrow = c(2, 2))
# Plot histograms
hist(squid$DML, main = "DML", col = "lightblue", xlab = "Dorsal Mantle Length")
hist(squid$weight, main = "Weight", col = "lightgreen", xlab = "Weight (kg)")
hist(squid$eviscerate.weight, main = "Eviscerate Weight", col = "lightpink", xlab = "Eviscerate Weight")
hist(squid$ovary.weight, main = "Ovary Weight", col = "lightyellow", xlab = "Ovary Weight")
# Reset layout to default (optional)
par(mfrow = c(1, 1))
# Scatterplot: DML vs Weight
plot(squid$DML, squid$weight, main = "DML vs Weight", xlab = "DML", ylab = "Weight", col = "blue", pch = 16)
# Create transformed variables
squid$log_weight <- log(squid$weight)
squid$sqrt_weight <- sqrt(squid$weight)
# Scatterplot: DML vs Log(Weight)
plot(squid$DML, squid$log_weight, main = "DML vs Log(Weight)", xlab = "DML", ylab = "Log(Weight)", col = "red", pch = 16)
# Scatterplot: DML vs Sqrt(Weight)
plot(squid$DML, squid$sqrt_weight, main = "DML vs Sqrt(Weight)", xlab = "DML", ylab = "Sqrt(Weight)", col = "green", pch = 16)
# 2.1 Import the whaledata.csv file into R
whale <- read.csv("whaledata.csv")
# 2.2 Display the first 5 rows
head(whale, 5)
str(whale)
num_obs <- nrow(whale)
num_vars <- ncol(whale)
class(whale$month)
class(whale$water.noise)
# 2.3 Get a summary of the dataset
summary(whale)
colSums(is.na(whale))
# 2.4 Sort the dataset by depth in ascending order
whale.depth.sort <- whale[order(whale$depth), ]
# 2.5 Sort data set by ascending depth within each level of water noise
whale.noise.depth.sort <- whale[order(whale$water.noise, whale$depth), ]
# 2.6 Sort dataset by descending depth within each level of water noise
whale.noise.depth.desc <- whale[order(whale$water.noise, -whale$depth), ]
# 2.7 Count observations for each level of water noise
table(whale$water.noise)
table(whale$water.noise, whale$month)
# 2.1 Import the whaledata.csv file into R
whale <- read.csv("whaledata.csv")
# 2.2 Display the first 5 rows
head(whale, 5)
name(whale)
# 2.1 Import the whaledata.csv file into R
whale <- read.csv("whaledata.csv")
# 2.2 Display the first 5 rows
head(whale, 5)
str(whale)
num_obs <- nrow(whale)
num_vars <- ncol(whale)
class(whale$month)
class(whale$water.noise)
# 2.3 Get a summary of the dataset
summary(whale)
colSums(is.na(whale))
# 2.4 Sort the dataset by depth in ascending order
whale.depth.sort <- whale[order(whale$depth), ]
# 2.5 Sort data set by ascending depth within each level of water noise
whale.noise.depth.sort <- whale[order(whale$water.noise, whale$depth), ]
# 2.6 Sort dataset by descending depth within each level of water noise
whale.noise.depth.desc <- whale[order(whale$water.noise, -whale$depth), ]
# 2.7 Count observations for each level of water noise
table(whale$water.noise)
table(whale$water.noise, whale$month)
# 2.1 Import the whaledata.csv file into R
whale <- read.csv("whaledata.csv")
# 2.2 Display the first 5 rows
head(whale, 5)
names(whale)
str(whale)
num_obs <- nrow(whale)
num_vars <- ncol(whale)
class(whale$month)
class(whale$water.noise)
# 2.3 Get a summary of the dataset
summary(whale)
colSums(is.na(whale))
# 2.4 Sort the dataset by depth in ascending order
whale.depth.sort <- whale[order(whale$depth), ]
# 2.5 Sort data set by ascending depth within each level of water noise
whale.noise.depth.sort <- whale[order(whale$water.noise, whale$depth), ]
# 2.6 Sort dataset by descending depth within each level of water noise
whale.noise.depth.desc <- whale[order(whale$water.noise, -whale$depth), ]
# 2.7 Count observations for each level of water noise
table(whale$water.noise)
table(whale$water.noise, whale$month)
squid <- read.csv("squid.csv")
str(squid)
summary(squid)
num_obs <- nrow(squid)
num_vars <- ncol(squid)
squid$year <- as.factor(squid$year)
squid$month <- as.factor(squid$month)
squid$maturity.stage <- as.factor(squid$maturity.stage)
str(squid)
